import asyncio
import logging
from aiogram import Router, F, Bot
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, CallbackQuery, BufferedInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.nst_config import nst_params

import os
import uuid
from pathlib import Path

# from app.nst_engine import perform_style_transfer

from .common import cmd_start as common_cmd_start

from app.nst_engine import NSTEngine, NSTModelNotInitializedError

logger = logging.getLogger(__name__)
router = Router()


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
class NSTStates(StatesGroup):
    choosing_style_source = State()  # –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∏–ª—å –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
    waiting_for_style_upload = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å—Ç–∏–ª—è
    waiting_for_content_image = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞


def get_default_styles_buttons():
    buttons = []
    styles_found = []
    for item in nst_params.DEFAULT_STYLE_IMAGE_DIR.iterdir():
        if item.is_file() and item.suffix.lower() in [".png", ".jpg", ".jpeg"]:
            styles_found.append(item)

    if not styles_found:
        return []

    for style_file in styles_found:
        button_text = style_file.stem.replace("_", " ").capitalize()
        from aiogram.types import InlineKeyboardButton

        buttons.append(
            InlineKeyboardButton(
                text=button_text, callback_data=f"nst_default_style:{style_file.name}"
            )
        )
    return buttons


@router.message(Command("nst"))
async def cmd_nst_start(message: Message, state: FSMContext):
    await state.clear()

    # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –±–∏–ª–¥–µ—Ä
    final_builder = InlineKeyboardBuilder()

    # 1. –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ–π —Å—Ç–∏–ª—å"
    final_builder.button(text="üé® –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ–π —Å—Ç–∏–ª—å", callback_data="nst_upload_style")
    # –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –±—É–¥–µ—Ç –≤ –ø–µ—Ä–≤–æ–º —Ä—è–¥—É, –æ–¥–Ω–∞.
    # –ï—Å–ª–∏ –Ω—É–∂–Ω—ã –µ—â–µ –∫–Ω–æ–ø–∫–∏ –≤ —ç—Ç–æ–º —Ä—è–¥—É, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –¥–æ adjust/row.

    # 2. –ü–æ–ª—É—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö —Å—Ç–∏–ª–µ–π
    default_style_buttons = get_default_styles_buttons()

    if default_style_buttons:
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Å—Ç–∏–ª–∏.
        # .add() –¥–æ–±–∞–≤–ª—è–µ—Ç –∏—Ö –≤ —Ç–µ–∫—É—â–∏–π —Ä—è–¥, –µ—Å–ª–∏ –æ–Ω –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω, –∏–ª–∏ –≤ –Ω–æ–≤—ã–π.
        # .adjust() –ø–æ—Ç–æ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç –∏—Ö.
        for btn in default_style_buttons:
            final_builder.add(btn)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∫–Ω–æ–ø–∫—É

        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–Ω–æ–ø–∫–∏:
        # –ü–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞ ("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ–π") –±—É–¥–µ—Ç –≤ —Å–≤–æ–µ–º —Ä—è–¥—É.
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ (–¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Å—Ç–∏–ª–∏) –ø–æ 2 –≤ —Ä—è–¥—É.
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö —Å—Ç–∏–ª–µ–π = len(default_style_buttons)
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ = 1 + len(default_style_buttons)
        # –ú—ã —Ö–æ—Ç–∏–º: 1 –∫–Ω–æ–ø–∫–∞ –≤ –ø–µ—Ä–≤–æ–º —Ä—è–¥—É, –∑–∞—Ç–µ–º –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Ä—è–¥–∞—Ö –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
        adjust_params = [1]  # –ü–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞ –≤ —Å–≤–æ–µ–º —Ä—è–¥—É
        if default_style_buttons:
            adjust_params.extend([2] * (len(default_style_buttons) // 2))
            if len(default_style_buttons) % 2 == 1:
                # –ï—Å–ª–∏ –Ω–µ—á–µ—Ç–Ω–æ–µ –∫–æ–ª-–≤–æ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö, –ø–æ—Å–ª–µ–¥–Ω—è—è –±—É–¥–µ—Ç –æ–¥–Ω–∞
                adjust_params.append(1)
        final_builder.adjust(*adjust_params)

        await message.answer(
            "üé® Neural Style Transfer üé®\n" "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∏–ª—è:",
            reply_markup=final_builder.as_markup(),
        )
    else:  # –ï—Å–ª–∏ –Ω–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö —Å—Ç–∏–ª–µ–π, —Ç–æ–ª—å–∫–æ –æ–ø—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
        # final_builder —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–Ω–æ–ø–∫—É "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ–π —Å—Ç–∏–ª—å"
        # –∏ .adjust() –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–∑–º–µ—Å—Ç–∏—Ç –µ–µ –æ–¥–Ω—É –≤ —Ä—è–¥—É.
        final_builder.adjust(1)  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤ —Ä—è–¥—É
        await message.answer(
            "üé® Neural Style Transfer üé®\n" "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –°–¢–ò–õ–Ø.",
            reply_markup=final_builder.as_markup(),
        )

    await state.set_state(NSTStates.choosing_style_source)


@router.callback_query(F.data == "nst_upload_style", StateFilter(NSTStates.choosing_style_source))
async def cb_upload_style(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–•–æ—Ä–æ—à–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è –°–¢–ò–õ–Ø.")
    await state.set_state(NSTStates.waiting_for_style_upload)
    await callback.answer()


@router.callback_query(
    F.data.startswith("nst_default_style:"), StateFilter(NSTStates.choosing_style_source)
)
async def cb_default_style(callback: CallbackQuery, state: FSMContext):
    style_filename = callback.data.split(":", 1)[1]
    style_image_path = nst_params.DEFAULT_STYLE_IMAGE_DIR / style_filename

    if not style_image_path.exists():
        await callback.message.edit_text("–û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        await common_cmd_start(callback.message, state)
        return

    await state.update_data(style_image_path=str(style_image_path), style_is_default=True)
    await callback.message.edit_text(
        f"–°—Ç–∏–ª—å '{style_image_path.stem.capitalize()}' –≤—ã–±—Ä–∞–Ω. "
        "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –∫–∞—Ä—Ç–∏–Ω–∫—É —Å –ö–û–ù–¢–ï–ù–¢–û–ú (–æ–±—ã—á–Ω—É—é)."
    )
    await state.set_state(NSTStates.waiting_for_content_image)
    await callback.answer()


# –û—Ç–º–µ–Ω–∞ –Ω–∞ –ª—é–±–æ–º —ç—Ç–∞–ø–µ NST
@router.message(Command("cancel"), StateFilter(NSTStates))
async def cmd_cancel_nst(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π NST –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return

    logger.info(f"Cancelling state {current_state} for user {message.from_user.id}")

    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã
    user_data = await state.get_data()
    style_img_path = user_data.get("style_image_path")
    content_img_path = user_data.get("content_image_path")

    if (
        style_img_path
        and not user_data.get("style_is_default", False)
        and Path(style_img_path).exists()
    ):
        try:
            os.remove(style_img_path)
            logger.info(f"Removed temporary style image: {style_img_path}")
        except OSError as e:
            logger.error(f"Error removing temporary style image {style_img_path}: {e}")

    if content_img_path and Path(content_img_path).exists():
        try:
            os.remove(content_img_path)
            logger.info(f"Removed temporary content image: {content_img_path}")
        except OSError as e:
            logger.error(f"Error removing temporary content image {content_img_path}: {e}")

    await state.clear()
    await message.answer("–ü—Ä–æ—Ü–µ—Å—Å Neural Style Transfer –æ—Ç–º–µ–Ω–µ–Ω.")
    # –ú–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –∏–ª–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—é
    await common_cmd_start(message, state)


@router.message(NSTStates.waiting_for_style_upload, F.photo)
async def nst_style_image_uploaded(message: Message, state: FSMContext, bot: Bot):
    if not message.photo:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –∫–∞—Ä—Ç–∏–Ω–∫—É (–Ω–µ —Ñ–∞–π–ª).")
        return

    photo_file_id = message.photo[-1].file_id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    file_info = await bot.get_file(photo_file_id)
    file_ext = Path(file_info.file_path).suffix or ".jpg"
    temp_style_filename = f"style_{message.from_user.id}_{uuid.uuid4().hex}{file_ext}"
    temp_style_path = nst_params.TEMP_IMAGE_DIR / temp_style_filename

    try:
        await bot.download_file(file_info.file_path, destination=str(temp_style_path))
        logger.info(f"Style image saved to: {temp_style_path}")
    except Exception as e:
        logger.error(f"Error downloading style image: {e}")
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ /cancel"
        )
        return

    await state.update_data(style_image_path=str(temp_style_path), style_is_default=False)
    await state.set_state(NSTStates.waiting_for_content_image)
    await message.answer("–°—Ç–∏–ª—å –ø—Ä–∏–Ω—è—Ç! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –∫–∞—Ä—Ç–∏–Ω–∫—É —Å –ö–û–ù–¢–ï–ù–¢–û–ú (–æ–±—ã—á–Ω—É—é).")


@router.message(NSTStates.waiting_for_style_upload)  # –ï—Å–ª–∏ –Ω–µ —Ñ–æ—Ç–æ –∏ –Ω–µ /cancel
async def nst_style_image_invalid_upload(message: Message):
    await message.answer(
        "–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è –°–¢–ò–õ–Ø "
        "–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )


# @router.message(NSTStates.waiting_for_content_image, F.photo)
# async def nst_content_image_received(message: Message, state: FSMContext, bot: Bot):
@router.message(NSTStates.waiting_for_content_image, F.photo)
async def nst_content_image_received(
    message: Message, state: FSMContext, bot: Bot, nst_engine: NSTEngine
):

    if not message.photo:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –∫–∞—Ä—Ç–∏–Ω–∫—É (–Ω–µ —Ñ–∞–π–ª).")
        return

    content_photo_file_id = message.photo[-1].file_id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç-–∫–∞—Ä—Ç–∏–Ω–∫—É –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    file_info = await bot.get_file(content_photo_file_id)
    file_ext = Path(file_info.file_path).suffix or ".jpg"
    temp_content_filename = f"content_{message.from_user.id}_{uuid.uuid4().hex}{file_ext}"
    temp_content_path = nst_params.TEMP_IMAGE_DIR / temp_content_filename

    try:
        await bot.download_file(file_info.file_path, destination=str(temp_content_path))
        logger.info(f"Content image saved to: {temp_content_path}")
    except Exception as e:
        logger.error(f"Error downloading content image: {e}")
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ /cancel"
        )
        return

    user_data = await state.get_data()
    style_image_path = user_data.get("style_image_path")
    style_is_default = user_data.get("style_is_default", False)

    if not style_image_path:
        logger.error("Style image path not found in state data!")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ (–Ω–µ –Ω–∞–π–¥–µ–Ω –ø—É—Ç—å –∫ —Å—Ç–∏–ª—é). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /nst."
        )
        await state.clear()
        return

    processing_msg = await message.answer(
        "–ö–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–∏–Ω—è—Ç! ‚ú® –ù–∞—á–∏–Ω–∞—é –º–∞–≥–∏—é —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è. ‚è≥"
    )

    # –ü–æ–ª—É—á–∞–µ–º nst_engine –∏–∑ dispatcher data
    # nst_engine: NSTEngine = Dispatcher.get_current().get("nst_engine")
    # –ï—Å–ª–∏ –Ω–µ —á–µ—Ä–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç —Ñ—É–Ω–∫—Ü–∏–∏
    # if not nst_engine or not nst_engine._initialized:
    #     logger.error("NST engine not available or not initialized.")
    if not nst_engine:
        logger.error("NST engine not available in dispatcher.")
        await message.answer("–°–µ—Ä–≤–∏—Å —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()
        return

    loop = asyncio.get_event_loop()
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º NST(perform_style_transfer) –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
        # perform_style_transfer —Å–∞–º–∞ –ø–æ —Å–µ–±–µ —É–∂–µ –Ω–µ async, –∞ –æ–±—ã—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è#
        stylized_image_bytes = await loop.run_in_executor(
            None,  # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç ThreadPoolExecutor –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            # perform_style_transfer,  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞
            nst_engine.process_images,
            style_image_path,  # –ü–µ—Ä–≤—ã–π –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –¥–ª—è perform_style_transfer
            str(temp_content_path),  # –í—Ç–æ—Ä–æ–π –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç
            # –ï—Å–ª–∏ —É perform_style_transfer –µ—Å—Ç—å –µ—â–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –ø–µ—Ä–µ–¥–∞–µ–º –∏—Ö –¥–∞–ª—å—à–µ
            # , num_steps=50 # –Ω–∞–ø—Ä–∏–º–µ—Ä
        )

        result_photo = BufferedInputFile(stylized_image_bytes, filename="stylized_result.jpg")
        await message.answer_photo(result_photo, caption="–ì–æ—Ç–æ–≤–æ! –í–æ—Ç –≤–∞—à —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —à–µ–¥–µ–≤—Ä. üñºÔ∏è")
    except NSTModelNotInitializedError:
        logger.error("NST engine was not initialized when called.")
        await message.answer(
            "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    except RuntimeError as e:
        logger.error(f"NST Runtime Error: {e}", exc_info=True)
        await message.answer(
            f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–æ –≤—Ä–µ–º—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ /cancel."
        )
    except Exception as e:
        logger.error(f"Error during NST processing or sending result: {e}", exc_info=True)
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ /cancel."
        )
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        if Path(temp_content_path).exists():
            try:
                os.remove(temp_content_path)
                logger.info(f"Removed temporary content image: {temp_content_path}")
            except OSError as e:
                logger.error(f"Error removing temporary content image {temp_content_path}: {e}")

        if (
            not style_is_default and Path(style_image_path).exists()
        ):  # –£–¥–∞–ª—è–µ–º —Å—Ç–∏–ª—å, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            try:
                os.remove(style_image_path)
                logger.info(f"Removed temporary style image: {style_image_path}")
            except OSError as e:
                logger.error(f"Error removing temporary style image {style_image_path}: {e}")

        try:  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–û–±—Ä–∞–±–æ—Ç–∫–∞..."
            await bot.delete_message(
                chat_id=processing_msg.chat.id, message_id=processing_msg.message_id
            )
        except Exception:
            pass  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–∏–ª–æ—Å—å

        await state.clear()


@router.message(NSTStates.waiting_for_content_image)  # –ï—Å–ª–∏ –Ω–µ —Ñ–æ—Ç–æ –∏ –Ω–µ /cancel
async def nst_content_image_invalid(message: Message):
    await message.answer(
        "–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è –ö–û–ù–¢–ï–ù–¢–ê "
        "–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )
