import asyncio
import functools
import logging
import time
import os
import uuid
from pathlib import Path

from aiogram import Router, F, Bot
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, CallbackQuery, BufferedInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from app.nst_engine import NSTEngine, NSTModelNotInitializedError
from app.nst_config import nst_params

from .common import cmd_start as common_cmd_start
from .utils import format_duration

logger = logging.getLogger(__name__)
router = Router()


# FSM for NST
class NSTStates(StatesGroup):
    choosing_style_source = State()  # load the style or select the default one
    waiting_for_style_upload = State()  # Waiting for the style image
    waiting_for_content_image = State()  # Waiting for the content image


@router.message(Command("nst"))
async def cmd_nst_start(message: Message, state: FSMContext, nst_engine: NSTEngine):
    await state.clear()

    builder = InlineKeyboardBuilder()
    builder.button(text="üé® –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ–π —Å—Ç–∏–ª—å", callback_data="nst_upload_style")

    default_styles = nst_engine.get_available_styles()
    for filename, display_name in default_styles.items():
        builder.button(text=display_name, callback_data=f"nst_default_style:{filename}")

    builder.adjust(1, 2)
    builder.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="nst_cancel"))

    await message.answer(
        "üé® Neural Style Transfer üé®\n" "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∏–ª—è:",
        reply_markup=builder.as_markup(),
    )
    await state.set_state(NSTStates.choosing_style_source)


@router.callback_query(
    F.data == "nst_upload_style", StateFilter(NSTStates.choosing_style_source)
)
async def cb_upload_style(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–•–æ—Ä–æ—à–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è –°–¢–ò–õ–Ø.",
        reply_markup=_get_cancel_inline_keyboard(),
    )
    await state.set_state(NSTStates.waiting_for_style_upload)
    await callback.answer()


@router.callback_query(
    F.data.startswith("nst_default_style:"),
    StateFilter(NSTStates.choosing_style_source),
)
async def cb_default_style(callback: CallbackQuery, state: FSMContext):
    style_filename = callback.data.split(":", 1)[1]
    style_image_path = nst_params.DEFAULT_STYLE_IMAGE_DIR / style_filename

    if not style_image_path.exists():
        await callback.message.edit_text(
            "–û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        await state.clear()
        await common_cmd_start(callback.message, state)
        return

    await state.update_data(
        style_image_path=str(style_image_path), style_is_default=True
    )
    await callback.message.edit_text(
        f"–°—Ç–∏–ª—å '{style_image_path.stem.capitalize()}' –≤—ã–±—Ä–∞–Ω. "
        "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É —Å –ö–û–ù–¢–ï–ù–¢–û–ú (–æ–±—ã—á–Ω—É—é).",
        reply_markup=_get_cancel_inline_keyboard(),
    )
    await state.set_state(NSTStates.waiting_for_content_image)
    await callback.answer()


@router.message(NSTStates.waiting_for_style_upload, F.photo)
async def nst_style_image_uploaded(message: Message, state: FSMContext, bot: Bot):
    if not message.photo:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É (–Ω–µ —Ñ–∞–π–ª).",
            reply_markup=_get_cancel_inline_keyboard(),
        )
        return

    photo_file_id = message.photo[-1].file_id

    # Saving the image to a temporary file
    file_info = await bot.get_file(photo_file_id)
    file_ext = Path(file_info.file_path).suffix or ".jpg"
    temp_style_filename = f"style_{message.from_user.id}_{uuid.uuid4().hex}{file_ext}"
    temp_style_path = nst_params.TEMP_IMAGE_DIR / temp_style_filename

    try:
        await bot.download_file(file_info.file_path, destination=str(temp_style_path))
        logger.info(f"Style image saved to: {temp_style_path}")
    except Exception as e:
        logger.error(f"Error downloading style image: {e}")
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ /cancel",
            reply_markup=_get_cancel_inline_keyboard(),
        )
        return

    await state.update_data(
        style_image_path=str(temp_style_path), style_is_default=False
    )
    await state.set_state(NSTStates.waiting_for_content_image)
    await message.answer(
        "–°—Ç–∏–ª—å –ø—Ä–∏–Ω—è—Ç! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É —Å –ö–û–ù–¢–ï–ù–¢–û–ú (–æ–±—ã—á–Ω—É—é).",
        reply_markup=_get_cancel_inline_keyboard(),
    )


@router.message(
    NSTStates.waiting_for_style_upload, ~Command(commands=["cancel", "start", "help"])
)
async def nst_style_image_invalid_upload(message: Message):
    await message.answer(
        "–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è –°–¢–ò–õ–Ø "
        "–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
        reply_markup=_get_cancel_inline_keyboard(),
    )


@router.message(NSTStates.waiting_for_content_image, F.photo)
async def nst_content_image_received(
    message: Message, state: FSMContext, bot: Bot, nst_engine: NSTEngine
):
    # 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM
    user_data = await state.get_data()
    style_image_path = user_data.get("style_image_path")
    style_is_default = user_data.get("style_is_default", False)

    if not style_image_path:
        logger.error("Style image path not found in state data!")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ (–Ω–µ –Ω–∞–π–¥–µ–Ω –ø—É—Ç—å –∫ —Å—Ç–∏–ª—é). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /nst."
        )
        await state.clear()
        return

    # 2. –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–∞—á–∞–ª–µ —Ä–∞–±–æ—Ç—ã
    processing_msg = await message.answer(
        "–ö–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–∏–Ω—è—Ç! ‚ú® –ù–∞—á–∏–Ω–∞—é —Ç–≤–æ—Ä–∏—Ç—å –º–∞–≥–∏—é... \n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è. ‚è≥"
    )

    # 3. –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è –≤ `finally`
    temp_content_path = None

    try:
        # 4. –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        content_photo_file_id = message.photo[-1].file_id
        file_info = await bot.get_file(content_photo_file_id)
        file_ext = Path(file_info.file_path).suffix or ".jpg"
        temp_content_filename = (
            f"content_{message.from_user.id}_{uuid.uuid4().hex}{file_ext}"
        )
        temp_content_path = nst_params.TEMP_IMAGE_DIR / temp_content_filename

        await bot.download_file(file_info.file_path, destination=str(temp_content_path))
        logger.info(f"Content image saved to: {temp_content_path}")

        # 5. –ó–∞–ø—É—Å–∫–∞–µ–º "—Ç—è–∂–µ–ª—É—é" –æ–ø–µ—Ä–∞—Ü–∏—é
        loop = asyncio.get_running_loop()
        start_time = time.monotonic()

        func_to_run = functools.partial(
            nst_engine.process_images, style_image_path, str(temp_content_path)
        )
        stylized_image_bytes = await loop.run_in_executor(None, func_to_run)

        # 6. –ì–æ—Ç–æ–≤–∏–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result_photo = BufferedInputFile(
            stylized_image_bytes, filename="stylized_result.jpg"
        )
        duration_str = format_duration(start_time)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Ç–∏–ª–∏—Ç—É
        final_caption = (
            "–ì–æ—Ç–æ–≤–æ! –í–æ—Ç –≤–∞—à —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —à–µ–¥–µ–≤—Ä. üñºÔ∏è\n\n"
            f"‚è±Ô∏è –í—Ä–µ–º—è –Ω–∞ —Å—Ç–∏–ª–∏–∑–∞—Ü–∏—é: –ø—Ä–∏–º–µ—Ä–Ω–æ {duration_str}\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ —Å–µ–∞–Ω—Å–∞ –≤–≤–µ–¥–∏—Ç–µ /start"
        )

        await message.answer_photo(result_photo, caption=final_caption)

    except NSTModelNotInitializedError:
        logger.error("NST engine was not initialized when called.")
        await message.answer(
            "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    except RuntimeError as e:
        logger.error(f"NST Runtime Error: {e}", exc_info=True)
        await message.answer(
            f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–æ –≤—Ä–µ–º—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."
        )
    except Exception as e:
        logger.error(
            f"Error during NST processing or sending result: {e}", exc_info=True
        )
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    finally:
        # 7. –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        if processing_msg:
            try:
                await bot.delete_message(
                    chat_id=processing_msg.chat.id, message_id=processing_msg.message_id
                )
            except Exception:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è

        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω
        if temp_content_path and Path(temp_content_path).exists():
            try:
                os.remove(temp_content_path)
                logger.info(f"Removed temporary content image: {temp_content_path}")
            except OSError as e:
                logger.error(f"Error removing temporary content image: {e}")

        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ —Å—Ç–∏–ª–µ–º, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        if (
            not style_is_default
            and style_image_path
            and Path(style_image_path).exists()
        ):
            try:
                os.remove(style_image_path)
                logger.info(f"Removed temporary style image: {style_image_path}")
            except OSError as e:
                logger.error(f"Error removing temporary style image: {e}")

        await state.clear()


@router.message(
    NSTStates.waiting_for_content_image, ~Command(commands=["cancel", "start", "help"])
)
async def nst_content_image_invalid(message: Message):
    await message.answer(
        "–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è –ö–û–ù–¢–ï–ù–¢–ê "
        "–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
        reply_markup=_get_cancel_inline_keyboard(),
    )


def _get_cancel_inline_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="nst_cancel")]
        ]
    )


@router.message(Command("cancel"), StateFilter(NSTStates))
async def cmd_cancel_nst(message: Message, state: FSMContext):
    await cancel_nst_operation(message, state)


@router.callback_query(F.data == "nst_cancel", StateFilter(NSTStates))
async def cb_cancel_nst(callback: CallbackQuery, state: FSMContext):
    await cancel_nst_operation(callback, state, is_callback=True)


async def cancel_nst_operation(
    message_or_callback: Message | CallbackQuery,
    state: FSMContext,
    is_callback: bool = False,
):
    current_state = await state.get_state()
    if current_state is None:
        reply_text = "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π NST –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        if is_callback:
            await message_or_callback.answer(reply_text, show_alert=True)
        else:
            await message_or_callback.answer(reply_text)
        return

    logger.info(
        f"Cancelling state {current_state} for user {message_or_callback.from_user.id}"
    )

    user_data = await state.get_data()
    style_img_path = user_data.get("style_image_path")
    content_img_path = user_data.get("content_image_path")

    if (
        style_img_path
        and not user_data.get("style_is_default", False)
        and Path(style_img_path).exists()
    ):
        try:
            os.remove(style_img_path)
            logger.info(f"Removed temporary style image: {style_img_path}")
        except OSError as e:
            logger.error(f"Error removing temporary style image {style_img_path}: {e}")

    if content_img_path and Path(content_img_path).exists():
        try:
            os.remove(content_img_path)
            logger.info(f"Removed temporary content image: {content_img_path}")
        except OSError as e:
            logger.error(
                f"Error removing temporary content image {content_img_path}: {e}"
            )

    await state.clear()

    reply_text = "–ü—Ä–æ—Ü–µ—Å—Å Neural Style Transfer –æ—Ç–º–µ–Ω–µ–Ω."
    if is_callback:
        await message_or_callback.message.edit_text(reply_text)
    else:
        await message_or_callback.answer(reply_text)

    await common_cmd_start(
        message_or_callback.message if is_callback else message_or_callback, state
    )

    if is_callback:
        await message_or_callback.answer()
