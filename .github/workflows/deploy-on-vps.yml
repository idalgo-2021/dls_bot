# .github/workflows/deploy-on-vps.yml

name: Deploy to VPS


on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    # 'runs-on' указывает, на каком типе runner'а должна выполняться эта задача.
    # 'self-hosted' означает, что задача будет направлена на один из собственных (self-hosted) runner'ов, т.е. VPS 
    runs-on: self-hosted 
    
    steps:
      - name: Checkout code
        # 'uses' указывает на использование готового action из GitHub Marketplace или локального.
        # 'actions/checkout@v4' - стандартный action для скачивания (checkout) кода репозитория на runner (т.е. VPS).
        uses: actions/checkout@v4

      - name: Build Docker image on VPS
        run: docker build -t dls_bot_vps:latest .
        # run: docker build --load -t dls_bot_vps:latest . 
        # 'docker build': стандартная команда для сборки Docker-образа.
        # '--load': флаг для Docker Buildx, который гарантирует, что собранный образ
        #           будет загружен в локальный Docker image store на VPS.
        # '-t dls_bot_vps:latest': присваивает образу имя 'dls_bot_vps' и тег 'latest'.
        #                          Это имя будет локальным для Docker на твоем VPS.
        # '.': указывает, что контекст сборки (где находится Dockerfile) - это текущий каталог 
        #      (корень репозитория, скачанный на предыдущем шаге).

      - name: Stop and remove old container (if exists)
        run: | 
          # 'docker stop dls_bot_instance': останавливает контейнер с именем 'dls_bot_instance'.
          # '|| true': если контейнер не найден (или уже остановлен), команда завершится ошибкой.
          #            '|| true' предотвращает это, позволяя workflow продолжаться.
          docker stop dls_bot_instance || true
          # 'docker rm dls_bot_instance': удаляет остановленный контейнер с именем 'dls_bot_instance'.
          docker rm dls_bot_instance || true   
      
      - name: Run new Docker container
        run: |
          docker run -d \
            --name dls_bot_instance \
            --restart unless-stopped \
            -p 2000:2000 \
            --env-file /home/ubuntu/dls_bot_config/.env \
            # Монтируем папку с моделями
            # Путь слева - на VPS. Путь справа - внутри контейнера.
            -v /home/ubuntu/dls_bot_data/models:/usr/src/app/app/models \
            dls_bot_instance:latest

      # Очистка старых Docker-образов
      # 'if: success()' - этот шаг будет выполнен только если все предыдущие шаги в задаче 
      #                 завершились успешно.
      - name: Clean up old Docker images (optional)
        if: success()
        run: docker image prune -a -f --filter "until=24h"
        # 'docker image prune': команда для удаления неиспользуемых Docker-образов.
        # '-a': (all) удалить все неиспользуемые образы (не только "висячие").
        # '-f': (force) не запрашивать подтверждения.
        # '--filter "until=24h"': удалить только те неиспользуемые образы, которые были созданы
        #                         более 24 часов назад. Помогает сохранить недавние кэши и версии.